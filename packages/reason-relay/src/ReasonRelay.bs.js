// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactRelay = require("react-relay");
var RelayHooks = require("relay-hooks");
var RelayRuntime = require("relay-runtime");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function dataIdToString(dataId) {
  return dataId;
}

function makeDataId(string) {
  return string;
}

function copyFieldsFrom(sourceRecord, t) {
  t.copyFieldsFrom(sourceRecord);
  return /* () */0;
}

function getDataId(t) {
  return t.getDataID();
}

function getLinkedRecord(name, $$arguments, t) {
  return Caml_option.nullable_to_opt(t.getLinkedRecord(name, $$arguments));
}

function getLinkedRecords(name, $$arguments, t) {
  var match = t.getLinkedRecords(name, $$arguments);
  if (match == null) {
    return undefined;
  } else {
    return $$Array.map((function (v) {
                  if (v == null) {
                    return undefined;
                  } else {
                    return Caml_option.some(v);
                  }
                }), match);
  }
}

function getOrCreateLinkedRecord(name, typeName, $$arguments, t) {
  return t.getOrCreateLinkedRecord(name, typeName, $$arguments);
}

function getType(t) {
  return t.getType();
}

function getValueString(name, $$arguments, t) {
  return Caml_option.nullable_to_opt(t.getValue(name, $$arguments));
}

function getValueInt(name, $$arguments, t) {
  return Caml_option.nullable_to_opt(t.getValue(name, $$arguments));
}

function getValueFloat(name, $$arguments, t) {
  return Caml_option.nullable_to_opt(t.getValue(name, $$arguments));
}

function getValueBool(name, $$arguments, t) {
  return Caml_option.nullable_to_opt(t.getValue(name, $$arguments));
}

function setLinkedRecord(record, name, $$arguments, t) {
  return t.setLinkedRecord(record, name, $$arguments);
}

function setLinkedRecords(records, name, $$arguments, t) {
  return t.setLinkedRecords(records, name, $$arguments);
}

function setValueString(value, name, $$arguments, t) {
  return t.setValue(value, name, $$arguments);
}

function setValueInt(value, name, $$arguments, t) {
  return t.setValue(value, name, $$arguments);
}

function setValueFloat(value, name, $$arguments, t) {
  return t.setValue(value, name, $$arguments);
}

function setValueBool(value, name, $$arguments, t) {
  return t.setValue(value, name, $$arguments);
}

var RecordProxy = /* module */[
  /* copyFieldsFrom */copyFieldsFrom,
  /* getDataId */getDataId,
  /* getLinkedRecord */getLinkedRecord,
  /* getLinkedRecords */getLinkedRecords,
  /* getOrCreateLinkedRecord */getOrCreateLinkedRecord,
  /* getType */getType,
  /* getValueString */getValueString,
  /* getValueInt */getValueInt,
  /* getValueFloat */getValueFloat,
  /* getValueBool */getValueBool,
  /* setLinkedRecord */setLinkedRecord,
  /* setLinkedRecords */setLinkedRecords,
  /* setValueString */setValueString,
  /* setValueInt */setValueInt,
  /* setValueFloat */setValueFloat,
  /* setValueBool */setValueBool
];

function create(dataId, typeName, t) {
  return t.create(dataId, typeName);
}

function $$delete(dataId, t) {
  t.delete(dataId);
  return /* () */0;
}

function get(dataId, t) {
  return Caml_option.nullable_to_opt(t.get(dataId));
}

function getRootField(fieldName, t) {
  return Caml_option.nullable_to_opt(t.getRootField(fieldName));
}

function getPluralRootField(fieldName, t) {
  var match = t.getPluralRootField(fieldName);
  if (match == null) {
    return undefined;
  } else {
    return $$Array.map((function (v) {
                  if (v == null) {
                    return undefined;
                  } else {
                    return Caml_option.some(v);
                  }
                }), match);
  }
}

function create$1(dataId, typeName, t) {
  return t.create(dataId, typeName);
}

function $$delete$1(dataId, t) {
  t.delete(dataId);
  return /* () */0;
}

function get$1(dataId, t) {
  return Caml_option.nullable_to_opt(t.get(dataId));
}

function getConnection(record, key, filters, t) {
  return t.getConnection(record, key, filters);
}

function createEdge(store, connection, node, edgeType, t) {
  return t.createEdge(store, connection, node, edgeType);
}

function insertEdgeBefore(connection, newEdge, cursor, t) {
  t.insertEdgeBefore(connection, newEdge, cursor);
  return /* () */0;
}

function insertEdgeAfter(connection, newEdge, cursor, t) {
  t.insertEdgeAfter(connection, newEdge, cursor);
  return /* () */0;
}

function deleteNode(connection, nodeId, t) {
  t.deleteNode(connection, nodeId);
  return /* () */0;
}

var ConnectionHandler = /* module */[
  /* getConnection */getConnection,
  /* createEdge */createEdge,
  /* insertEdgeBefore */insertEdgeBefore,
  /* insertEdgeAfter */insertEdgeAfter,
  /* deleteNode */deleteNode
];

function MakeUseQuery(C) {
  var use = function (variables, dataFrom, param) {
    var tmp;
    if (dataFrom !== undefined) {
      switch (dataFrom) {
        case 0 : 
            tmp = "NETWORK_ONLY";
            break;
        case 1 : 
            tmp = "STORE_THEN_NETWORK";
            break;
        case 2 : 
            tmp = "STORE_OR_NETWORK";
            break;
        case 3 : 
            tmp = "STORE_ONLY";
            break;
        
      }
    } else {
      tmp = undefined;
    }
    var q = RelayHooks.useQuery({
          dataFrom: tmp,
          query: C[/* query */0],
          variables: variables
        });
    var match = q.props;
    var match$1 = q.error;
    if (match == null) {
      if (match$1 == null) {
        return /* Loading */0;
      } else {
        return /* Error */Block.__(0, [match$1]);
      }
    } else if (match$1 == null) {
      return /* Data */Block.__(1, [match]);
    } else {
      return /* Error */Block.__(0, [match$1]);
    }
  };
  return /* module */[/* use */use];
}

function MakeUseFragment(C) {
  var use = function (fr) {
    return RelayHooks.useFragment(C[/* fragmentSpec */0], fr);
  };
  return /* module */[/* use */use];
}

function MakeUseMutation(C) {
  var use = function (param) {
    var match = RelayHooks.useMutation(C[/* node */0]);
    var rawState = match[1];
    var mutate = match[0];
    var makeMutation = function (variables, optimisticResponse, optimisticUpdater, updater, param) {
      return Curry._1(mutate, {
                      variables: variables,
                      optimisticResponse: optimisticResponse,
                      optimisticUpdater: optimisticUpdater,
                      updater: updater
                    }).then((function (res) {
                      return Promise.resolve(/* Success */Block.__(0, [res]));
                    })).catch((function (err) {
                    return Promise.resolve(/* Error */Block.__(1, [err]));
                  }));
    };
    var match$1 = rawState.loading;
    var match$2 = rawState.data;
    var match$3 = rawState.error;
    return /* tuple */[
            makeMutation,
            match$1 ? /* Loading */0 : (
                (match$2 == null) ? (
                    (match$3 == null) ? /* Success */Block.__(1, [undefined]) : /* Error */Block.__(0, [match$3])
                  ) : /* Success */Block.__(1, [Caml_option.some(match$2)])
              )
          ];
  };
  return /* module */[/* use */use];
}

function make(network, store) {
  return new RelayRuntime.Environment({
              network: network,
              store: store
            });
}

var Environment = /* module */[/* make */make];

var provider = ReactRelay.ReactRelayContext.Provider;

function ReasonRelay$Context$Provider(Props) {
  var environment = Props.environment;
  var children = Props.children;
  return React.createElement(provider, {
              value: {
                environment: environment
              },
              children: children
            });
}

var EnvironmentNotFoundInContext = Caml_exceptions.create("ReasonRelay.EnvironmentNotFoundInContext");

function useEnvironmentFromContext(param) {
  var context = React.useContext(ReactRelay.ReactRelayContext);
  if (context !== undefined) {
    return Caml_option.valFromOption(context).environment;
  } else {
    throw EnvironmentNotFoundInContext;
  }
}

var Mutation_failed = Caml_exceptions.create("ReasonRelay.Mutation_failed");

function MakeCommitMutation(C) {
  var commitMutation = function (environment, variables, optimisticUpdater, optimisticResponse, updater, param) {
    return new Promise((function (resolve, reject) {
                  RelayRuntime.commitMutation(environment, {
                        variables: variables,
                        mutation: C[/* node */0],
                        onCompleted: (function (res, errors) {
                            if (errors == null) {
                              if (res == null) {
                                return reject([
                                            Mutation_failed,
                                            /* array */[]
                                          ]);
                              } else {
                                return resolve(res);
                              }
                            } else {
                              return reject([
                                          Mutation_failed,
                                          errors
                                        ]);
                            }
                          }),
                        onError: (function (error) {
                            if (error == null) {
                              return reject([
                                          Mutation_failed,
                                          /* array */[]
                                        ]);
                            } else {
                              return reject([
                                          Mutation_failed,
                                          /* array */[error]
                                        ]);
                            }
                          }),
                        optimisticResponse: optimisticResponse,
                        optimisticUpdater: optimisticUpdater,
                        updater: updater
                      });
                  return /* () */0;
                }));
  };
  return /* module */[/* commitMutation */commitMutation];
}

function commitLocalUpdate(environment, updater) {
  RelayRuntime.commitLocalUpdate(environment, updater);
  return /* () */0;
}

function RecordSourceSelectorProxy_003(prim) {
  return prim.getRoot();
}

var RecordSourceSelectorProxy = [
  create,
  $$delete,
  get,
  RecordSourceSelectorProxy_003,
  getRootField,
  getPluralRootField
];

function RecordSourceProxy_003(prim) {
  return prim.getRoot();
}

var RecordSourceProxy = [
  create$1,
  $$delete$1,
  get$1,
  RecordSourceProxy_003
];

var Network = [(function (prim) {
      return RelayRuntime.Network.create(prim);
    })];

var RecordSource = [(function (prim) {
      return new RelayRuntime.RecordSource();
    })];

var Store = [(function (prim) {
      return new RelayRuntime.Store(prim);
    })];

var Context_001 = [
  (function (prim, prim$1, prim$2, prim$3) {
      var tmp = {
        environment: prim,
        children: prim$1
      };
      if (prim$2 !== undefined) {
        tmp.key = Caml_option.valFromOption(prim$2);
      }
      return tmp;
    }),
  ReasonRelay$Context$Provider
];

var Context = [
  ReactRelay.ReactRelayContext,
  Context_001
];

function fetchQuery(prim, prim$1, prim$2) {
  return RelayRuntime.fetchQuery(prim, prim$1, prim$2);
}

exports.dataIdToString = dataIdToString;
exports.makeDataId = makeDataId;
exports.RecordProxy = RecordProxy;
exports.RecordSourceSelectorProxy = RecordSourceSelectorProxy;
exports.RecordSourceProxy = RecordSourceProxy;
exports.ConnectionHandler = ConnectionHandler;
exports.MakeUseQuery = MakeUseQuery;
exports.MakeUseFragment = MakeUseFragment;
exports.MakeUseMutation = MakeUseMutation;
exports.Network = Network;
exports.RecordSource = RecordSource;
exports.Store = Store;
exports.Environment = Environment;
exports.Context = Context;
exports.EnvironmentNotFoundInContext = EnvironmentNotFoundInContext;
exports.useEnvironmentFromContext = useEnvironmentFromContext;
exports.Mutation_failed = Mutation_failed;
exports.MakeCommitMutation = MakeCommitMutation;
exports.commitLocalUpdate = commitLocalUpdate;
exports.fetchQuery = fetchQuery;
/* provider Not a pure module */
