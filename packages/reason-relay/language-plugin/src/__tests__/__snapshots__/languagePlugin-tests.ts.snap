// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Language plugin tests Explicit __typename selection throws when selecting a union without an explicit __typename selection 1`] = `
[GraphQLError: Unions and interfaces must have the field __typename explicitly selected. Please add __typename to the fields selected by "participantById" in your operation.

Source: GraphQL request (2:13)
1: query SomeQuery {
2:             participantById(id: "123") {
               ^
3:               ... on User {
]
`;

exports[`Language plugin tests Field names Cannot start with uppercase letter throws when trying to use a field name starting with an uppercase 1`] = `
[GraphQLError: Found an invalid field name: Field names may not start with an uppercase letter. Please alias the 'Observer' field to something starting with a lowercase letter.

Source: GraphQL request (2:13)
1: query SomeQuery {
2:             Observer(id: "123") {
               ^
3:               id
]
`;

exports[`Language plugin tests Field names Reserved keywords throws when trying to use a field name that's a reserved keyword 1`] = `
[GraphQLError: Found an invalid field name: 'new' is a reserved keyword in ReasonML and therefore cannot be used as a field name. Please alias your field to something else.

Source: GraphQL request (3:17)
2:               user(id: "123") {
3:                 new
                   ^
4:               }
]
`;

exports[`Language plugin tests Fragment prints indications of existing fragment refs in generated types 1`] = `
"// SomeComponent_user.graphql
/* @generated */

module Unions = {};

module Types = {};

type fragment = {id: string};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) =
  {.. \\"__$fragment_ref__SomeComponent_user\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {};

type operationType = ReasonRelay.fragmentNode;


// SomeOtherComponent_user.graphql
/* @generated */

module Unions = {};

module Types = {};

type fragment = {
  __wrappedFragment__SomeComponent_user: ReasonRelay.wrappedFragmentRef,
};

module FragmentConverters: {
  let unwrapFragment_fragment:
    fragment =>
    {. \\"__$fragment_ref__SomeComponent_user\\": SomeComponent_user_graphql.t};
} = {
  external unwrapFragment_fragment:
    fragment =>
    {. \\"__$fragment_ref__SomeComponent_user\\": SomeComponent_user_graphql.t} =
    \\"%identity\\";
};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) =
  {.. \\"__$fragment_ref__SomeOtherComponent_user\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {};

type operationType = ReasonRelay.fragmentNode;
"
`;

exports[`Language plugin tests Fragment prints the correct fragment ref extractor helpers and base types 1`] = `
"// SomeComponent_user.graphql
/* @generated */

module Unions = {};

module Types = {};

type fragment = {id: string};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) =
  {.. \\"__$fragment_ref__SomeComponent_user\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {};

type operationType = ReasonRelay.fragmentNode;
"
`;

exports[`Language plugin tests Mutation prints the correct basic structure for mutations 1`] = `
"// SetUserLocationMutation.graphql
/* @generated */

module Unions = {};

module Types = {
  type changedUser = {
    id: string,
    firstName: string,
  };
  type setUserLocation = {changedUser: option(changedUser)};
  type locationBounds = {
    lat: float,
    lng: float,
  };
  type setUserLocationInput = {
    clientMutationId: option(string),
    userId: string,
    location: option(locationBounds),
  };
};

open Types;

type response = {setUserLocation};
type variables = {input: setUserLocationInput};

module FragmentConverters: {} = {};

module Internal = {
  type wrapResponseRaw;
  let wrapResponseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"setUserLocation_changedUser\\":[[0,\\"\\"]]} |}
  ];
  let wrapResponseConverterMap = ();
  let convertWrapResponse = v =>
    v
    ->ReasonRelay._convertObj(
        wrapResponseConverter,
        wrapResponseConverterMap,
        Js.null,
      );

  type responseRaw;
  let responseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"setUserLocation_changedUser\\":[[0,\\"\\"]]} |}
  ];
  let responseConverterMap = ();
  let convertResponse = v =>
    v
    ->ReasonRelay._convertObj(
        responseConverter,
        responseConverterMap,
        Js.undefined,
      );

  let variablesConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let variablesConverterMap = ();
  let convertVariables = v =>
    v
    ->ReasonRelay._convertObj(
        variablesConverter,
        variablesConverterMap,
        Js.undefined,
      );
};

module Utils = {};

type operationType = ReasonRelay.mutationNode;
"
`;

exports[`Language plugin tests Query connections generates helpers for connections with unions 1`] = `
"// TestPagination_query.graphql
/* @generated */

module Unions = {
  module Union_fragment_participantsConnection_edges_node: {
    type wrapped;
    type user = {
      firstName: string,
      id: string,
    };
    type observer = {
      name: string,
      id: string,
    };
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    let unwrap: wrapped => t;
  } = {
    type wrapped;
    type user = {
      firstName: string,
      id: string,
    };
    type observer = {
      name: string,
      id: string,
    };
    external __unwrap_union: wrapped => {. \\"__typename\\": string} =
      \\"%identity\\";
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    external __unwrap_user: wrapped => user = \\"%identity\\";
    external __unwrap_observer: wrapped => observer = \\"%identity\\";
    let unwrap = wrapped => {
      let unwrappedUnion = wrapped |> __unwrap_union;
      switch (unwrappedUnion##__typename) {
      | \\"User\\" => \`User(wrapped |> __unwrap_user)
      | \\"Observer\\" => \`Observer(wrapped |> __unwrap_observer)
      | _ => \`UnmappedUnionMember
      };
    };
  };

  type union_fragment_participantsConnection_edges_node = [
    | \`User(Union_fragment_participantsConnection_edges_node.user)
    | \`Observer(Union_fragment_participantsConnection_edges_node.observer)
    | \`UnmappedUnionMember
  ];
};

open Unions;

module Types = {
  type edges = {
    node: option(union_fragment_participantsConnection_edges_node),
  };
  type participantsConnection = {edges: option(array(option(edges)))};
};

open Types;

type fragment = {participantsConnection: option(participantsConnection)};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"participantsConnection\\":[[0,\\"\\"]],\\"participantsConnection_edges\\":[[0,\\"\\"],[1,\\"\\"]],\\"participantsConnection_edges_node\\":[[0,\\"\\"],[3,\\"fragment_participantsConnection_edges_node\\"]]} |}
  ];
  let fragmentConverterMap = {
    \\"fragment_participantsConnection_edges_node\\": Union_fragment_participantsConnection_edges_node.unwrap,
  };
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) =
  {.. \\"__$fragment_ref__TestPagination_query\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {
  let getConnectionNodes_participantsConnection:
    option(participantsConnection) =>
    array(union_fragment_participantsConnection_edges_node) =
    connection =>
      switch (connection) {
      | None => [||]
      | Some(connection) =>
        switch (connection.edges) {
        | None => [||]
        | Some(edges) =>
          edges
          ->Belt.Array.keepMap(edge =>
              switch (edge) {
              | None => None
              | Some(edge) =>
                switch (edge.node) {
                | None => None
                | Some(node) => node
                }
              }
            )
        }
      };
};

type operationType = ReasonRelay.fragmentNode;
"
`;

exports[`Language plugin tests Query connections generates helpers for nested connection 1`] = `
"// TestPagination_query.graphql
/* @generated */

module Unions = {};

module Types = {
  type node = {
    id: string,
    firstName: string,
  };
  type edges = {node: option(node)};
  type friendsConnection = {edges: option(array(option(edges)))};
  type me = {friendsConnection: option(friendsConnection)};
};

open Types;

type fragment = {me};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"me_friendsConnection\\":[[0,\\"\\"]],\\"me_friendsConnection_edges\\":[[0,\\"\\"],[1,\\"\\"]],\\"me_friendsConnection_edges_node\\":[[0,\\"\\"]]} |}
  ];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) =
  {.. \\"__$fragment_ref__TestPagination_query\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {
  let getConnectionNodes_friendsConnection:
    option(friendsConnection) => array(node) =
    connection =>
      switch (connection) {
      | None => [||]
      | Some(connection) =>
        switch (connection.edges) {
        | None => [||]
        | Some(edges) =>
          edges
          ->Belt.Array.keepMap(edge =>
              switch (edge) {
              | None => None
              | Some(edge) =>
                switch (edge.node) {
                | None => None
                | Some(node) => node
                }
              }
            )
        }
      };
};

type operationType = ReasonRelay.fragmentNode;
"
`;

exports[`Language plugin tests Query connections generates helpers for root level connection 1`] = `
"// TestPagination_query.graphql
/* @generated */

module Unions = {};

module Types = {
  type node = {
    id: string,
    firstName: string,
  };
  type edges = {node: option(node)};
  type usersConnection = {edges: option(array(option(edges)))};
};

open Types;

type fragment = {usersConnection: option(usersConnection)};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"usersConnection\\":[[0,\\"\\"]],\\"usersConnection_edges\\":[[0,\\"\\"],[1,\\"\\"]],\\"usersConnection_edges_node\\":[[0,\\"\\"]]} |}
  ];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) =
  {.. \\"__$fragment_ref__TestPagination_query\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {
  let getConnectionNodes_usersConnection:
    option(usersConnection) => array(node) =
    connection =>
      switch (connection) {
      | None => [||]
      | Some(connection) =>
        switch (connection.edges) {
        | None => [||]
        | Some(edges) =>
          edges
          ->Belt.Array.keepMap(edge =>
              switch (edge) {
              | None => None
              | Some(edge) =>
                switch (edge.node) {
                | None => None
                | Some(node) => node
                }
              }
            )
        }
      };
};

type operationType = ReasonRelay.fragmentNode;
"
`;

exports[`Language plugin tests Query prints simple responses and variables 1`] = `
"// appQuery.graphql
/* @generated */

module Unions = {};

module Types = {
  type user = {
    id: string,
    firstName: string,
  };
};

open Types;

type response = {user: option(user)};
type refetchVariables = {userId: option(string)};
let makeRefetchVariables = (~userId=?, ()): refetchVariables => {
  userId: userId,
};
type variables = {userId: string};

module FragmentConverters: {} = {};

module Internal = {
  type responseRaw;
  let responseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"user\\":[[0,\\"\\"]]} |}
  ];
  let responseConverterMap = ();
  let convertResponse = v =>
    v
    ->ReasonRelay._convertObj(
        responseConverter,
        responseConverterMap,
        Js.undefined,
      );

  let variablesConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let variablesConverterMap = ();
  let convertVariables = v =>
    v
    ->ReasonRelay._convertObj(
        variablesConverter,
        variablesConverterMap,
        Js.undefined,
      );
};

module Utils = {};

type operationType = ReasonRelay.queryNode;
"
`;

exports[`Language plugin tests Subscription prints the correct basic structure for subscriptions 1`] = `
"// SomeSubscription.graphql
/* @generated */

module Unions = {};

module Types = {
  type user = {
    id: string,
    firstName: string,
  };
  type userChanged = {user: option(user)};
  type userChangedInput = {
    clientMutationId: option(string),
    userId: string,
  };
};

open Types;

type response = {userChanged};
type variables = {input: userChangedInput};

module FragmentConverters: {} = {};

module Internal = {
  type responseRaw;
  let responseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"userChanged_user\\":[[0,\\"\\"]]} |}
  ];
  let responseConverterMap = ();
  let convertResponse = v =>
    v
    ->ReasonRelay._convertObj(
        responseConverter,
        responseConverterMap,
        Js.undefined,
      );

  let variablesConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let variablesConverterMap = ();
  let convertVariables = v =>
    v
    ->ReasonRelay._convertObj(
        variablesConverter,
        variablesConverterMap,
        Js.undefined,
      );
};

module Utils = {};

type operationType = ReasonRelay.subscriptionNode;
"
`;

exports[`Language plugin tests Unions generates code to unwrap fragments on unions 1`] = `
"// app_user.graphql
/* @generated */

module Unions = {};

module Types = {};

type fragment = {
  id: string,
  firstName: string,
};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) = {.. \\"__$fragment_ref__app_user\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {};

type operationType = ReasonRelay.fragmentNode;


// app_observer.graphql
/* @generated */

module Unions = {};

module Types = {};

type fragment = {
  id: string,
  name: string,
};

module FragmentConverters: {} = {};

module Internal = {
  type fragmentRaw;
  let fragmentConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let fragmentConverterMap = ();
  let convertFragment = v =>
    v
    ->ReasonRelay._convertObj(
        fragmentConverter,
        fragmentConverterMap,
        Js.undefined,
      );
};

type t;
type fragmentRef;
type fragmentRefSelector('a) = {.. \\"__$fragment_ref__app_observer\\": t} as 'a;
external getFragmentRef: fragmentRefSelector('a) => fragmentRef = \\"%identity\\";

module Utils = {};

type operationType = ReasonRelay.fragmentNode;


// appQuery.graphql
/* @generated */

module Unions = {
  module Union_response_participantById: {
    type wrapped;
    type user = {
      __wrappedFragment__app_user: ReasonRelay.wrappedFragmentRef,
      id: string,
    };
    type observer = {
      __wrappedFragment__app_observer: ReasonRelay.wrappedFragmentRef,
      id: string,
    };
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    let unwrapFragment_user:
      user => {. \\"__$fragment_ref__app_user\\": App_user_graphql.t};
    let unwrapFragment_observer:
      observer => {. \\"__$fragment_ref__app_observer\\": App_observer_graphql.t};
    let unwrap: wrapped => t;
  } = {
    type wrapped;
    type user = {
      __wrappedFragment__app_user: ReasonRelay.wrappedFragmentRef,
      id: string,
    };
    type observer = {
      __wrappedFragment__app_observer: ReasonRelay.wrappedFragmentRef,
      id: string,
    };
    external __unwrap_union: wrapped => {. \\"__typename\\": string} =
      \\"%identity\\";
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    external __unwrap_user: wrapped => user = \\"%identity\\";
    external __unwrap_observer: wrapped => observer = \\"%identity\\";
    let unwrap = wrapped => {
      let unwrappedUnion = wrapped |> __unwrap_union;
      switch (unwrappedUnion##__typename) {
      | \\"User\\" => \`User(wrapped |> __unwrap_user)
      | \\"Observer\\" => \`Observer(wrapped |> __unwrap_observer)
      | _ => \`UnmappedUnionMember
      };
    };

    external unwrapFragment_user:
      user => {. \\"__$fragment_ref__app_user\\": App_user_graphql.t} =
      \\"%identity\\";
    external unwrapFragment_observer:
      observer => {. \\"__$fragment_ref__app_observer\\": App_observer_graphql.t} =
      \\"%identity\\";
  };

  type union_response_participantById = [
    | \`User(Union_response_participantById.user)
    | \`Observer(Union_response_participantById.observer)
    | \`UnmappedUnionMember
  ];
};

open Unions;

module Types = {};

type response = {participantById: option(union_response_participantById)};
type variables = unit;

module FragmentConverters: {} = {};

module Internal = {
  type responseRaw;
  let responseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"participantById\\":[[0,\\"\\"],[3,\\"response_participantById\\"]]} |}
  ];
  let responseConverterMap = {
    \\"response_participantById\\": Union_response_participantById.unwrap,
  };
  let convertResponse = v =>
    v
    ->ReasonRelay._convertObj(
        responseConverter,
        responseConverterMap,
        Js.undefined,
      );

  let variablesConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let variablesConverterMap = ();
  let convertVariables = v =>
    v
    ->ReasonRelay._convertObj(
        variablesConverter,
        variablesConverterMap,
        Js.undefined,
      );
};

module Utils = {};

type operationType = ReasonRelay.queryNode;
"
`;

exports[`Language plugin tests Unions generates code to unwrap unions 1`] = `
"// appQuery.graphql
/* @generated */

module Unions = {
  module Union_response_participantById: {
    type wrapped;
    type user = {
      lastName: string,
      firstName: string,
      id: string,
    };
    type observer = {
      name: string,
      id: string,
    };
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    let unwrap: wrapped => t;
  } = {
    type wrapped;
    type user = {
      lastName: string,
      firstName: string,
      id: string,
    };
    type observer = {
      name: string,
      id: string,
    };
    external __unwrap_union: wrapped => {. \\"__typename\\": string} =
      \\"%identity\\";
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    external __unwrap_user: wrapped => user = \\"%identity\\";
    external __unwrap_observer: wrapped => observer = \\"%identity\\";
    let unwrap = wrapped => {
      let unwrappedUnion = wrapped |> __unwrap_union;
      switch (unwrappedUnion##__typename) {
      | \\"User\\" => \`User(wrapped |> __unwrap_user)
      | \\"Observer\\" => \`Observer(wrapped |> __unwrap_observer)
      | _ => \`UnmappedUnionMember
      };
    };
  };

  type union_response_participantById = [
    | \`User(Union_response_participantById.user)
    | \`Observer(Union_response_participantById.observer)
    | \`UnmappedUnionMember
  ];
};

open Unions;

module Types = {};

type response = {participantById: option(union_response_participantById)};
type variables = unit;

module FragmentConverters: {} = {};

module Internal = {
  type responseRaw;
  let responseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"participantById\\":[[0,\\"\\"],[3,\\"response_participantById\\"]]} |}
  ];
  let responseConverterMap = {
    \\"response_participantById\\": Union_response_participantById.unwrap,
  };
  let convertResponse = v =>
    v
    ->ReasonRelay._convertObj(
        responseConverter,
        responseConverterMap,
        Js.undefined,
      );

  let variablesConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let variablesConverterMap = ();
  let convertVariables = v =>
    v
    ->ReasonRelay._convertObj(
        variablesConverter,
        variablesConverterMap,
        Js.undefined,
      );
};

module Utils = {};

type operationType = ReasonRelay.queryNode;
"
`;

exports[`Language plugin tests Unions handles nested unions 1`] = `
"// appQuery.graphql
/* @generated */

type enum_ObserverStatus = [ | \`Active | \`Inactive | \`FUTURE_ADDED_VALUE__];

module Unions = {
  module Union_response_participantById_observer_manager: {
    type wrapped;
    type user = {
      lastName: string,
      firstName: string,
      id: string,
    };
    type observer = {
      status: enum_ObserverStatus,
      isOnline: option(bool),
      id: string,
    };
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    let unwrap: wrapped => t;
  } = {
    type wrapped;
    type user = {
      lastName: string,
      firstName: string,
      id: string,
    };
    type observer = {
      status: enum_ObserverStatus,
      isOnline: option(bool),
      id: string,
    };
    external __unwrap_union: wrapped => {. \\"__typename\\": string} =
      \\"%identity\\";
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    external __unwrap_user: wrapped => user = \\"%identity\\";
    external __unwrap_observer: wrapped => observer = \\"%identity\\";
    let unwrap = wrapped => {
      let unwrappedUnion = wrapped |> __unwrap_union;
      switch (unwrappedUnion##__typename) {
      | \\"User\\" => \`User(wrapped |> __unwrap_user)
      | \\"Observer\\" => \`Observer(wrapped |> __unwrap_observer)
      | _ => \`UnmappedUnionMember
      };
    };
  };

  type union_response_participantById_observer_manager = [
    | \`User(Union_response_participantById_observer_manager.user)
    | \`Observer(Union_response_participantById_observer_manager.observer)
    | \`UnmappedUnionMember
  ];

  module Union_response_participantById: {
    type wrapped;
    type user = {
      lastName: string,
      firstName: string,
      id: string,
    };
    type observer = {
      manager: option(union_response_participantById_observer_manager),
      name: string,
      id: string,
    };
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    let unwrap: wrapped => t;
  } = {
    type wrapped;
    type user = {
      lastName: string,
      firstName: string,
      id: string,
    };
    type observer = {
      manager: option(union_response_participantById_observer_manager),
      name: string,
      id: string,
    };
    external __unwrap_union: wrapped => {. \\"__typename\\": string} =
      \\"%identity\\";
    type t = [ | \`User(user) | \`Observer(observer) | \`UnmappedUnionMember];
    external __unwrap_user: wrapped => user = \\"%identity\\";
    external __unwrap_observer: wrapped => observer = \\"%identity\\";
    let unwrap = wrapped => {
      let unwrappedUnion = wrapped |> __unwrap_union;
      switch (unwrappedUnion##__typename) {
      | \\"User\\" => \`User(wrapped |> __unwrap_user)
      | \\"Observer\\" => \`Observer(wrapped |> __unwrap_observer)
      | _ => \`UnmappedUnionMember
      };
    };
  };

  type union_response_participantById = [
    | \`User(Union_response_participantById.user)
    | \`Observer(Union_response_participantById.observer)
    | \`UnmappedUnionMember
  ];
};

open Unions;

module Types = {};

type response = {participantById: option(union_response_participantById)};
type variables = unit;

module FragmentConverters: {} = {};

module Internal = {
  type responseRaw;
  let responseConverter: Js.Dict.t(array((int, string))) = [%raw
    {| {\\"participantById\\":[[0,\\"\\"],[3,\\"response_participantById\\"]],\\"participantById_observer_manager\\":[[0,\\"\\"],[3,\\"response_participantById_observer_manager\\"]],\\"participantById_observer_manager_observer_status\\":[[2,\\"enum_ObserverStatus\\"]],\\"participantById_observer_manager_observer_isOnline\\":[[0,\\"\\"]]} |}
  ];
  let responseConverterMap = {
    \\"response_participantById\\": Union_response_participantById.unwrap,
    \\"response_participantById_observer_manager\\": Union_response_participantById_observer_manager.unwrap,
    \\"enum_ObserverStatus\\": SchemaAssets.Enum_ObserverStatus.unwrap,
  };
  let convertResponse = v =>
    v
    ->ReasonRelay._convertObj(
        responseConverter,
        responseConverterMap,
        Js.undefined,
      );

  let variablesConverter: Js.Dict.t(array((int, string))) = [%raw {| {} |}];
  let variablesConverterMap = ();
  let convertVariables = v =>
    v
    ->ReasonRelay._convertObj(
        variablesConverter,
        variablesConverterMap,
        Js.undefined,
      );
};

module Utils = {};

type operationType = ReasonRelay.queryNode;
"
`;
