// Generated by BUCKLESCRIPT VERSION 5.0.5-beta.1, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Reason = require("reason");

function printQuoted(propName) {
  return "\"" + (propName + "\"");
}

var printPropName = printQuoted;

function printEnumName(name) {
  return "enum_" + name;
}

function printWrappedEnumName(name) {
  return "SchemaAssets.Enum_" + (name + ".wrapped");
}

function printWrappedUnionName(name) {
  return "Union_" + (name + ".wrapped");
}

function printFragmentRef(name) {
  return name + "_graphql.t";
}

function getFragmentRefName(name) {
  return "__$fragment_ref__" + name;
}

function getInputTypeName(name) {
  return "input_" + name;
}

function printAnyType(param) {
  return "ReasonRelay.any";
}

function printTypeReference(typeName) {
  return typeName;
}

function printScalar(scalarValue) {
  if (typeof scalarValue === "number") {
    switch (scalarValue) {
      case 0 : 
          return "int";
      case 1 : 
          return "string";
      case 2 : 
          return "float";
      case 3 : 
          return "bool";
      case 4 : 
          return "ReasonRelay.any";
      
    }
  } else {
    return scalarValue[0];
  }
}

function printPropType(propType, optType) {
  switch (propType.tag | 0) {
    case 0 : 
        return printScalar(propType[0]);
    case 1 : 
        return printWrappedEnumName(propType[0]);
    case 2 : 
        return printObject(propType[0], optType);
    case 3 : 
        return printArray(propType[0], optType);
    case 4 : 
        return propType[0] + "_graphql.t";
    case 5 : 
        return propType[0];
    case 6 : 
        return printWrappedUnionName(propType[0]);
    
  }
}

function printPropValue(propValue, optType) {
  var str = /* record */[/* contents */""];
  var addToStr = function (s) {
    str[0] = str[0] + s;
    return /* () */0;
  };
  if (propValue[/* nullable */0]) {
    if (optType) {
      addToStr("option(");
    } else {
      addToStr("Js.Nullable.t(");
    }
  }
  addToStr(printPropType(propValue[/* propType */1], optType));
  if (propValue[/* nullable */0]) {
    addToStr(")");
  }
  return str[0];
}

function printObject(obj, optType) {
  var match = obj[/* values */0].length;
  if (match !== 0) {
    var str = /* record */[/* contents */"{."];
    var addToStr = function (s) {
      str[0] = str[0] + s;
      return /* () */0;
    };
    $$Array.iteri((function (index, p) {
            if (index > 0) {
              addToStr(",");
            }
            var tmp;
            if (p.tag) {
              tmp = printQuoted(p[0]) + (": " + printPropValue(p[1], optType));
            } else {
              var name = p[0];
              tmp = printQuoted("__$fragment_ref__" + name) + (": " + (name + "_graphql.t"));
            }
            return addToStr(tmp);
          }), obj[/* values */0]);
    addToStr("}");
    return str[0];
  } else {
    return "unit";
  }
}

function printArray(propValue, optType) {
  return "array(" + (printPropValue(propValue, optType) + ")");
}

function printRootType(rootType) {
  switch (rootType.tag | 0) {
    case 0 : 
        return "type response = " + (printObject(rootType[0], /* JsNullable */0) + ";");
    case 1 : 
        return "type fragment = " + (printObject(rootType[0], /* JsNullable */0) + ";");
    case 2 : 
        return "type variables = " + (printObject(rootType[0], /* Option */1) + ";");
    case 3 : 
        return "type " + (rootType[0] + (" = " + (printObject(rootType[1], /* Option */1) + ";")));
    case 4 : 
        return "type fragment = array(" + (printObject(rootType[0], /* JsNullable */0) + ");");
    
  }
}

function printCode(str) {
  return Reason.printRE(Reason.parseRE(str));
}

function makeRootType(rootType) {
  var str = printRootType(rootType);
  return Reason.printRE(Reason.parseRE(str));
}

function makeEnum(fullEnum) {
  var valuesStr = /* record */[/* contents */""];
  $$Array.iter((function (value) {
          valuesStr[0] = valuesStr[0] + ("| `" + value);
          return /* () */0;
        }), fullEnum[/* values */1]);
  return "type " + ("enum_" + fullEnum[/* name */0] + (" = [ " + (valuesStr[0] + " ];")));
}

exports.printQuoted = printQuoted;
exports.printPropName = printPropName;
exports.printEnumName = printEnumName;
exports.printWrappedEnumName = printWrappedEnumName;
exports.printWrappedUnionName = printWrappedUnionName;
exports.printFragmentRef = printFragmentRef;
exports.getFragmentRefName = getFragmentRefName;
exports.getInputTypeName = getInputTypeName;
exports.printAnyType = printAnyType;
exports.printTypeReference = printTypeReference;
exports.printScalar = printScalar;
exports.printPropType = printPropType;
exports.printPropValue = printPropValue;
exports.printObject = printObject;
exports.printArray = printArray;
exports.printRootType = printRootType;
exports.printCode = printCode;
exports.makeRootType = makeRootType;
exports.makeEnum = makeEnum;
/* reason Not a pure module */
