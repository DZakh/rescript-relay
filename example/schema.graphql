input AddTodoItemInput {
  text: String!
  clientMutationId: String
}

type AddTodoItemPayload {
  addedTodoItem: TodoItem
  clientMutationId: String
}

input DeleteTodoItemInput {
  id: ID!
  clientMutationId: String
}

type DeleteTodoItemPayload {
  deletedTodoItemId: ID
  clientMutationId: String
}

type Mutation {
  addTodoItem(input: AddTodoItemInput!): AddTodoItemPayload
  updateTodoItem(input: UpdateTodoItemInput!): UpdateTodoItemPayload
  deleteTodoItem(input: DeleteTodoItemInput!): DeleteTodoItemPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  siteStatistics: SiteStatistics!
  tickets(status: TicketStatus, after: String, first: Int, before: String, last: Int): TicketConnection!
  todos(after: String, first: Int, before: String, last: Int): TodoItemConnection!
}

type SiteStatistics implements Node {
  """The ID of an object"""
  id: ID!
  weeklySales: Float!
  weeklyOrders: Int!
  currentVisitorsOnline: Int!
}

type Ticket implements Node {
  """The ID of an object"""
  id: ID!
  assignee: User
  status: TicketStatus!
  subject: String!
  lastUpdated: String!
  trackingId: String!
}

"""A connection to a list of items."""
type TicketConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketEdge]
}

"""An edge in a connection."""
type TicketEdge {
  """The item at the end of the edge"""
  node: Ticket

  """A cursor for use in pagination"""
  cursor: String!
}

enum TicketStatus {
  Done
  Progress
  OnHold
  Rejected
}

type TodoItem implements Node {
  """The ID of an object"""
  id: ID!
  completed: Boolean
  text: String!
}

"""A connection to a list of items."""
type TodoItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoItemEdge]
}

"""An edge in a connection."""
type TodoItemEdge {
  """The item at the end of the edge"""
  node: TodoItem

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateTodoItemInput {
  id: ID!
  text: String!
  completed: Boolean!
  clientMutationId: String
}

type UpdateTodoItemPayload {
  updatedTodoItem: TodoItem
  clientMutationId: String
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  avatarUrl: String
  fullName: String!
}

