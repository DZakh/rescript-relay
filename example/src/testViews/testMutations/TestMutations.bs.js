// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonRelay from "reason-relay/src/ReasonRelay.bs.js";
import * as Js_null_undefined from "bs-platform/lib/es6/js_null_undefined.js";
import * as TestMutationsQuery_graphql from "../../__generated__/TestMutationsQuery_graphql.bs.js";
import * as TestMutationsAddBookMutation_graphql from "../../__generated__/TestMutationsAddBookMutation_graphql.bs.js";
import * as TestMutationsDeleteBookMutation_graphql from "../../__generated__/TestMutationsDeleteBookMutation_graphql.bs.js";
import * as TestMutationsUpdateBookMutation_graphql from "../../__generated__/TestMutationsUpdateBookMutation_graphql.bs.js";

var Mutation = ReasonRelay.MakeCommitMutation(/* module */[/* node */TestMutationsAddBookMutation_graphql.node]);

var UseMutation = ReasonRelay.MakeUseMutation(/* module */[/* node */TestMutationsAddBookMutation_graphql.node]);

var use = UseMutation[/* use */0];

var commitMutation = Mutation[/* commitMutation */0];

var AddMutation = /* module */[
  /* Operation */0,
  /* Mutation */Mutation,
  /* UseMutation */UseMutation,
  /* use */use,
  /* commitMutation */commitMutation
];

var Mutation$1 = ReasonRelay.MakeCommitMutation(/* module */[/* node */TestMutationsUpdateBookMutation_graphql.node]);

var UseMutation$1 = ReasonRelay.MakeUseMutation(/* module */[/* node */TestMutationsUpdateBookMutation_graphql.node]);

var use$1 = UseMutation$1[/* use */0];

var commitMutation$1 = Mutation$1[/* commitMutation */0];

var UpdateMutation = /* module */[
  /* Operation */0,
  /* Mutation */Mutation$1,
  /* UseMutation */UseMutation$1,
  /* use */use$1,
  /* commitMutation */commitMutation$1
];

var Mutation$2 = ReasonRelay.MakeCommitMutation(/* module */[/* node */TestMutationsDeleteBookMutation_graphql.node]);

var UseMutation$2 = ReasonRelay.MakeUseMutation(/* module */[/* node */TestMutationsDeleteBookMutation_graphql.node]);

var use$2 = UseMutation$2[/* use */0];

var commitMutation$2 = Mutation$2[/* commitMutation */0];

var DeleteMutation = /* module */[
  /* Operation */0,
  /* Mutation */Mutation$2,
  /* UseMutation */UseMutation$2,
  /* use */use$2,
  /* commitMutation */commitMutation$2
];

var UseQuery = ReasonRelay.MakeUseQuery(/* module */[/* query */TestMutationsQuery_graphql.node]);

var use$3 = UseQuery[/* use */0];

function $$fetch(environment, variables) {
  return ReasonRelay.fetchQuery(environment, TestMutationsQuery_graphql.node, variables);
}

var Query = /* module */[
  /* Operation */0,
  /* UseQuery */UseQuery,
  /* use */use$3,
  /* fetch */$$fetch
];

function TestMutations(Props) {
  var environment = ReasonRelay.useEnvironmentFromContext(/* () */0);
  var query = Curry._3(use$3, /* () */0, undefined, /* () */0);
  var match = Curry._1(use$1, /* () */0);
  var updateBook = match[0];
  var tmp;
  tmp = typeof query === "number" || !query.tag ? null : $$Array.map((function (book) {
            return React.createElement("div", {
                        key: book.id
                      }, React.createElement("p", undefined, book.title), React.createElement("p", undefined, book.author), React.createElement("button", {
                            type: "button",
                            onClick: (function (param) {
                                Curry._5(updateBook, {
                                      input: {
                                        clientMutationId: undefined,
                                        id: book.id,
                                        author: "New author",
                                        title: book.title,
                                        status: Caml_option.nullable_to_opt(book.status)
                                      }
                                    }, {
                                      updateBook: {
                                        book: Js_null_undefined.fromOption({
                                              id: book.id,
                                              title: book.title,
                                              author: "New author",
                                              status: book.status
                                            })
                                      }
                                    }, undefined, undefined, /* () */0);
                                return /* () */0;
                              })
                          }, "Update " + (book.title + " optimistic")));
          }), query[0].books);
  return React.createElement(React.Fragment, undefined, tmp, typeof match[1] === "number" ? React.createElement("p", undefined, "Doing mutation...") : null, React.createElement("button", {
                  onClick: (function (param) {
                      Curry._6(commitMutation, environment, {
                            input: {
                              clientMutationId: undefined,
                              title: "New book",
                              author: "Some author"
                            }
                          }, undefined, undefined, (function (store) {
                              var mutationRes = ReasonRelay.RecordSourceSelectorProxy[/* getRootField */4]("addBook", store);
                              var rootNode = ReasonRelay.RecordSourceSelectorProxy[/* getRoot */3](store);
                              var rootBooks = ReasonRelay.RecordProxy[/* getLinkedRecords */3]("books", undefined, rootNode);
                              var addedBook = mutationRes !== undefined ? ReasonRelay.RecordProxy[/* getLinkedRecord */2]("book", undefined, Caml_option.valFromOption(mutationRes)) : undefined;
                              if (rootBooks !== undefined) {
                                if (addedBook !== undefined) {
                                  ReasonRelay.RecordProxy[/* setLinkedRecords */11]($$Array.append(rootBooks, /* array */[Caml_option.some(Caml_option.valFromOption(addedBook))]), "books", undefined, rootNode);
                                }
                                
                              } else if (addedBook !== undefined) {
                                ReasonRelay.RecordProxy[/* setLinkedRecords */11](/* array */[Caml_option.some(Caml_option.valFromOption(addedBook))], "books", undefined, rootNode);
                              }
                              return /* () */0;
                            }), /* () */0);
                      return /* () */0;
                    })
                }, "Add book by Commit mutation"));
}

var make = TestMutations;

export {
  AddMutation ,
  UpdateMutation ,
  DeleteMutation ,
  Query ,
  make ,
  
}
/* Mutation Not a pure module */
