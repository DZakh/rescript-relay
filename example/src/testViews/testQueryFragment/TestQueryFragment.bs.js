// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonRelay from "reason-relay/src/ReasonRelay.bs.js";
import * as TestQueryFragmentQuery_graphql from "../../__generated__/TestQueryFragmentQuery_graphql.bs.js";
import * as TestQueryFragment_book_graphql from "../../__generated__/TestQueryFragment_book_graphql.bs.js";

var UseQuery = ReasonRelay.MakeUseQuery(/* module */[/* query */TestQueryFragmentQuery_graphql.node]);

var use = UseQuery[/* use */0];

function $$fetch(environment, variables) {
  return ReasonRelay.fetchQuery(environment, TestQueryFragmentQuery_graphql.node, variables);
}

var Query = /* module */[
  /* Operation */0,
  /* UseQuery */UseQuery,
  /* use */use,
  /* fetch */$$fetch
];

var UseFragment = ReasonRelay.MakeUseFragment(/* module */[/* fragmentSpec */TestQueryFragment_book_graphql.node]);

function use$1(fRef) {
  return Curry._1(UseFragment[/* use */0], fRef);
}

var Fragment = /* module */[
  /* Operation */0,
  /* UseFragment */UseFragment,
  /* use */use$1
];

function TestQueryFragment$BookViewer(Props) {
  var bookRef = Props.book;
  var book = Curry._1(UseFragment[/* use */0], bookRef);
  var environment = ReasonRelay.useEnvironmentFromContext(/* () */0);
  var match = React.useState((function () {
          return "New Title";
        }));
  var setTitle = match[1];
  var title = match[0];
  return React.createElement("div", undefined, React.createElement("h1", undefined, book.title), React.createElement("p", undefined, book.author), React.createElement("p", undefined, React.createElement("input", {
                      placeholder: book.title + " title",
                      type: "text",
                      value: title,
                      onChange: (function (e) {
                          return Curry._1(setTitle, (function (param) {
                                        return e.currentTarget.value;
                                      }));
                        })
                    }), React.createElement("button", {
                      onClick: (function (param) {
                          return ReasonRelay.commitLocalUpdate(environment, (function (store) {
                                        var bookNode = ReasonRelay.RecordSourceSelectorProxy[/* get */2](ReasonRelay.makeDataId(book.id), store);
                                        if (bookNode !== undefined) {
                                          var bookNode$1 = Caml_option.valFromOption(bookNode);
                                          var currentTitle = ReasonRelay.RecordProxy[/* getValueString */6]("title", undefined, bookNode$1);
                                          if (currentTitle !== undefined) {
                                            ReasonRelay.RecordProxy[/* setValueString */12](currentTitle + (" " + title), "title", undefined, bookNode$1);
                                            return /* () */0;
                                          } else {
                                            return /* () */0;
                                          }
                                        } else {
                                          return /* () */0;
                                        }
                                      }));
                        })
                    }, "Update " + (book.title + " locally"))));
}

var BookViewer = /* module */[/* make */TestQueryFragment$BookViewer];

function TestQueryFragment(Props) {
  var query = Curry._3(use, /* () */0, undefined, /* () */0);
  if (typeof query === "number") {
    return React.createElement("p", undefined, "Loading...");
  } else if (query.tag) {
    return $$Array.map((function (book) {
                  return React.createElement(TestQueryFragment$BookViewer, {
                              book: book,
                              key: book.id
                            });
                }), query[0].books);
  } else {
    return React.createElement("p", undefined, "Error");
  }
}

var make = TestQueryFragment;

export {
  Query ,
  Fragment ,
  BookViewer ,
  make ,
  
}
/* UseQuery Not a pure module */
